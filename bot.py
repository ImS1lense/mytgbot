import random
import time
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_data.json'

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
emojis = {
    "start": "üå±",
    "grow": "üåø",
    "top": "üèÜ",
    "profile": "üë§",
    "success": "üéâ",
    "fail": "‚ùå",
    "reload": "üîÑ",
    "creator": "üëë",
    "menu": "üçî",
    "wait": "‚è≥",
    "happy": "üòä",
    "warning": "‚ö†Ô∏è",
    "trophy": "üèÖ",
    "home": "üè†",
    "level_up": "‚¨ÜÔ∏è",
    "reset": "üîÑ",
    "stats": "üìä",
    "gift": "üéÅ",
    "clock": "‚è∞",
    "leaf": "üçÉ"
}

# –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞
BONUS_NAME = "–ë–æ–Ω—É—Å iq"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
GROW_COOLDOWN = 5 * 60  # 5 –º–∏–Ω—É—Ç –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
BONUS_COOLDOWN = 3 * 60 * 60  # 3 —á–∞—Å–∞ –¥–ª—è –±–æ–Ω—É—Å–∞

# ID —Å–æ–∑–¥–∞—Ç–µ–ª—è (–≤–∞—à ID)
CREATOR_ID = 7058646786  # –í–∞—à Telegram ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE) and os.path.getsize(DATA_FILE) > 0:
        try:
            with open(DATA_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")
            return {}
    else:
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)  # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = load_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            'name': update.message.from_user.first_name if update.message else update.callback_query.from_user.first_name,
            'nickname': update.message.from_user.username or "–ù–∏–∫–Ω–µ–π–º –Ω–µ –∑–∞–¥–∞–Ω",
            'join_time': time.time(),
            'growth': 0,
            'experience': 0,
            'failed_attempts': 0,
            'last_growth': time.time(),
            'last_visit': time.time(),  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
            'last_growth_time': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
            'last_daily_time': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
            'growth_attempts': []  # –•—Ä–∞–Ω–∏–º –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
        }
        save_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

    keyboard = [
        [InlineKeyboardButton(f"{emojis['profile']} –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton(f"{emojis['top']} –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data='top')],
        [InlineKeyboardButton(f"{emojis['grow']} –ü–æ–≤—ã—Å–∏—Ç—å iq", callback_data='grow')],
        [InlineKeyboardButton(f"{emojis['gift']} {BONUS_NAME}", callback_data='daily')],
        [InlineKeyboardButton(f"{emojis['stats']} –°—Ç–∞—Ç—ã", callback_data='stats')],
        [InlineKeyboardButton(f"{emojis['reset']} –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='reset')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"{emojis['start']} –ü—Ä–∏–≤–µ—Ç, {user_data[user_id]['name']}! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? {emojis['menu']}", reply_markup=reply_markup) if update.message else await update.callback_query.message.edit_text(f"{emojis['start']} –ü—Ä–∏–≤–µ—Ç, {user_data[user_id]['name']}! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? {emojis['menu']}", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == 'profile':
        await profile(update, context)
    elif query.data == 'top':
        await top(update, context)
    elif query.data == 'grow':
        await grow(update, context)
    elif query.data == 'daily':
        await daily_bonus(update, context)
    elif query.data == 'stats':
        await stats(update, context)
    elif query.data == 'reset':
        await reset(update, context)
    elif query.data == 'home':
        await start(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def profile(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    if user_id not in user_data:
        await update.callback_query.message.reply_text(f"{emojis['warning']} –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    user = user_data[user_id]
    join_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(user['join_time']))
    profile_text = f"{emojis['profile']} –ü—Ä–æ—Ñ–∏–ª—å:\n" \
                   f"{emojis['creator']} –ù–∏–∫: @{user['nickname']}\n" \
                   f"{emojis['clock']} –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {join_time}\n" \
                   f"{emojis['grow']} –£ —Ç–µ–±—è: {user['growth']} iq\n" \
                   f"{emojis['level_up']} –û–ø—ã—Ç: {user['experience']} {emojis['level_up']}\n" \
                   f"{emojis['fail']} –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {user['failed_attempts']}"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.delete()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton(f"{emojis['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='home')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text(profile_text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
async def top(update: Update, context: CallbackContext) -> None:
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
    sorted_users = sorted(user_data.items(), key=lambda item: item[1]['growth'], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–ø–∞
    top_text = f"{emojis['top']} –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for index, (user_id, data) in enumerate(sorted_users[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        top_text += f"{index + 1}. @{data['nickname']} ‚Äî {data['growth']} iq {emojis['trophy']}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø
    await update.callback_query.message.reply_text(top_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
async def grow(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    if user_id not in user_data:
        await update.callback_query.message.reply_text(f"{emojis['warning']} –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    user = user_data[user_id]
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)
    if current_time - user.get('last_growth_time', 0) < GROW_COOLDOWN:
        wait_time = GROW_COOLDOWN - (current_time - user['last_growth_time'])
        wait_time_formatted = time.strftime('%H:%M:%S', time.gmtime(wait_time))
        await update.callback_query.message.reply_text(f"{emojis['wait']} –¢—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—à—å, –ø–æ–¥–æ–∂–¥–∏ –µ—â–µ {wait_time_formatted}.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    user_data[user_id]['last_growth_time'] = current_time

    # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    growth = random.randint(-5, 15)
    user_data[user_id]['growth'] += growth
    user_data[user_id]['experience'] += 10  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    if growth < 0:
        user_data[user_id]['failed_attempts'] += 1
        await update.callback_query.message.reply_text(f"{emojis['fail']} –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {abs(growth)} iq. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–æ–º–æ—Å–æ–º: {user_data[user_id]['growth']} iq.")
    else:
        await update.callback_query.message.reply_text(f"{emojis['success']} –í–´ –ø–æ–ª—É—á–∏–ª–∏ {growth} iq! –í–∞—à –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_data[user_id]['growth']} iq.")

    save_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async def daily_bonus(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    if user_id not in user_data:
        await update.callback_query.message.reply_text(f"{emojis['warning']} –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    current_time = time.time()
    user = user_data[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 3 —á–∞—Å–∞)
    if current_time - user.get('last_daily_time', 0) < BONUS_COOLDOWN:
        wait_time = BONUS_COOLDOWN - (current_time - user['last_daily_time'])
        wait_time_formatted = time.strftime('%H:%M:%S', time.gmtime(wait_time))
        await update.callback_query.message.reply_text(f"{emojis['wait']} –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {wait_time_formatted}.")
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –±–æ–Ω—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, +10 —Å–º –∏ –æ–ø—ã—Ç)
    bonus_growth = random.randint(5, 20)
    user_data[user_id]['growth'] += bonus_growth
    user_data[user_id]['experience'] += 5  # –ë–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç
    user_data[user_id]['last_daily_time'] = current_time

    save_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

    await update.callback_query.message.reply_text(f"{emojis['gift']} –í–∞—à {BONUS_NAME}: {bonus_growth} iq –∏ {5} –æ–ø—ã—Ç–∞! –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–æ–º–æ—Å–æ–º: {user_data[user_id]['growth']} iq.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats(update: Update, context: CallbackContext) -> None:
    total_users = len(user_data)
    total_growth = sum(user['growth'] for user in user_data.values())

    stats_text = f"{emojis['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n" \
                 f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
                 f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ : {total_growth} iq"

    await update.callback_query.message.reply_text(stats_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
async def reset(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    if user_id not in user_data:
        await update.callback_query.message.reply_text(f"{emojis['warning']} –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        'name': update.callback_query.from_user.first_name,
        'nickname': update.callback_query.from_user.username or "–ù–∏–∫–Ω–µ–π–º –Ω–µ –∑–∞–¥–∞–Ω",
        'join_time': time.time(),
        'growth': 0,
        'experience': 0,
        'failed_attempts': 0,
        'last_growth': time.time(),
        'last_visit': time.time(),  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
        'last_growth_time': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
        'last_daily_time': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        'growth_attempts': []  # –•—Ä–∞–Ω–∏–º –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    }
    save_data(user_data)

    await update.callback_query.message.reply_text(f"{emojis['reset']} –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token("7421858821:AAEhtDjt4rNBFs4IXuaOPrJTmhIaMmkP0jU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button_click))

    app.run_polling()

if __name__ == '__main__':
    main()
